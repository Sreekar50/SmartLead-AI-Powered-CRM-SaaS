name: SmartLead CRM CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY_BACKEND: smartlead-backend
  ECR_REPOSITORY_FRONTEND: smartlead-frontend
  EKS_CLUSTER_NAME: smartlead-cluster

jobs:
  # Backend Build and Test
  backend-build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}

    - name: Run backend tests
      run: |
        cd backend/springboot-app
        mvn clean test

    - name: Build backend
      run: |
        cd backend/springboot-app
        mvn clean package -DskipTests

    - name: Upload backend artifact
      uses: actions/upload-artifact@v3
      with:
        name: backend-jar
        path: backend/springboot-app/target/*.jar

  # Frontend Build and Test
  frontend-build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/react-app/package-lock.json

    - name: Install frontend dependencies
      run: |
        cd frontend/react-app
        npm ci

    - name: Run frontend tests
      run: |
        cd frontend/react-app
        npm run test -- --coverage --watchAll=false

    - name: Build frontend
      run: |
        cd frontend/react-app
        npm run build

    - name: Upload frontend artifact
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: frontend/react-app/build

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: [backend-build, frontend-build]
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Docker Build and Push
  docker-build:
    runs-on: ubuntu-latest
    needs: [backend-build, frontend-build, security-scan]
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Download backend artifact
      uses: actions/download-artifact@v3
      with:
        name: backend-jar
        path: backend/springboot-app/target

    - name: Download frontend artifact
      uses: actions/download-artifact@v3
      with:
        name: frontend-build
        path: frontend/react-app/build

    - name: Build and push backend Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd backend/springboot-app
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest

    - name: Build and push frontend Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd frontend/react-app
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:latest

  # Infrastructure Deployment
  terraform-deploy:
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.0

    - name: Terraform Init
      run: |
        cd infrastructure/terraform
        terraform init

    - name: Terraform Plan
      run: |
        cd infrastructure/terraform
        terraform plan -var="image_tag=${{ github.sha }}"

    - name: Terraform Apply
      run: |
        cd infrastructure/terraform
        terraform apply -auto-approve -var="image_tag=${{ github.sha }}"

  # Kubernetes Deployment
  k8s-deploy:
    runs-on: ubuntu-latest
    needs: [terraform-deploy]
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

    - name: Deploy to Kubernetes
      run: |
        cd infrastructure/k8s
        kubectl apply -f namespace.yaml
        kubectl apply -f configmap.yaml
        kubectl apply -f secrets.yaml
        kubectl apply -f backend-deployment.yaml
        kubectl apply -f frontend-deployment.yaml
        kubectl apply -f backend-service.yaml
        kubectl apply -f frontend-service.yaml
        kubectl apply -f ingress.yaml

    - name: Wait for deployment
      run: |
        kubectl rollout status deployment/smartlead-backend -n smartlead
        kubectl rollout status deployment/smartlead-frontend -n smartlead

  # Post-deployment tests
  integration-tests:
    runs-on: ubuntu-latest
    needs: [k8s-deploy]
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Get service endpoints
      run: |
        kubectl get services -n smartlead
        kubectl get ingress -n smartlead

    - name: Run health checks
      run: |
        # Wait for services to be ready
        sleep 60
        
        # Get load balancer URL
        LB_URL=$(kubectl get ingress smartlead-ingress -n smartlead -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        
        # Health check backend
        curl -f "http://$LB_URL/api/health" || exit 1
        
        # Health check frontend
        curl -f "http://$LB_URL/" || exit 1

  # Slack notification
  notify:
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: always()
    steps:
    - name: Slack Notification
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow